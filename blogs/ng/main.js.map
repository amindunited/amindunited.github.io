{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/blog-post/blog-post.component.html","webpack:///./src/app/components/blog-post/blog-post.component.scss","webpack:///./src/app/components/blog-post/blog-post.component.ts","webpack:///./src/app/components/blog-posts/blog-posts.component.html","webpack:///./src/app/components/blog-posts/blog-posts.component.scss","webpack:///./src/app/components/blog-posts/blog-posts.component.ts","webpack:///./src/app/services/blog-posts/blog-posts.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { BlogPostsComponent } from './components/blog-posts/blog-posts.component';\nimport { BlogPostComponent } from './components/blog-post/blog-post.component';\n\nconst routes: Routes = [\n  {\n    path: 'blog-posts',\n    component: BlogPostsComponent,\n    data: { title: 'Posts' }\n  },\n  {\n    path: 'blog-posts/:id',\n    component: BlogPostComponent,\n    data: { title: 'Posts' }\n  },\n  { path: '',\n    redirectTo: 'blog-posts',\n    pathMatch: 'full'\n  },\n  // { path: '**', component: PageNotFoundComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<router-outlet></router-outlet>\\n\"","module.exports = \"\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'amu-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'amu';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BlogPostsComponent } from './components/blog-posts/blog-posts.component';\nimport { BlogPostsService } from './services/blog-posts/blog-posts.service';\nimport { BlogPostComponent } from './components/blog-post/blog-post.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BlogPostsComponent,\n    BlogPostComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule\n  ],\n  providers: [\n    BlogPostsService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div class=\\\"container\\\">\\n    <div class=\\\"card\\\">\\n      <h2>Blog Post</h2>\\n    </div>\\n\\n    <div *ngIf=\\\"(post$ | async) as post; else loading\\\">\\n\\n      <div class=\\\"card\\\">\\n        <h3>{{post.title}}</h3>\\n        <p [innerHTML]=\\\"post.content\\\"></p>\\n      </div>\\n    </div>\\n\\n    <ng-template #loading>\\n      Loading stuff...\\n    </ng-template>\\n  </div>\\n\"","module.exports = \"\"","import { BlogPostsService } from './../../services/blog-posts/blog-posts.service';\nimport { Component, OnInit, Input} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { from, of } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'amu-blog-post',\n  templateUrl: './blog-post.component.html',\n  styleUrls: ['./blog-post.component.scss']\n})\nexport class BlogPostComponent implements OnInit {\n\n  private id: Number;\n  public post$;\n\n  constructor(private route: ActivatedRoute, private blogPostService: BlogPostsService) { }\n\n  ngOnInit() {\n    this.id = +this.route.snapshot.paramMap.get('id');\n    this.post$ = from(this.blogPostService.getPosts())\n      .pipe(\n        mergeMap(payload => {\n          const post$ = payload.posts.filter((post) => {\n            return post.id === this.id;\n          }).reduce((acc, curr) => {\n            console.log('...', acc);\n            return acc;\n          });\n          return of(post$);\n        }\n      ));\n  }\n\n}\n","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"card\\\">\\n    <h2>Blog Posts</h2>\\n  </div>\\n  <div *ngIf=\\\"(posts$ | async)?.posts as posts; else loading\\\">\\n\\n    <div *ngFor='let post of posts' class=\\\"card\\\">\\n      <a routerLink=\\\"/blog-posts/{{post.id}}\\\">\\n        <h3>{{post.title}}</h3>\\n        <p>{{post.summary}}</p>\\n      </a>\\n    </div>\\n  </div>\\n\\n  <ng-template #loading>\\n    Loading stuff...\\n  </ng-template>\\n</div>\\n\"","module.exports = \"\"","import { BlogPostsService } from './../../services/blog-posts/blog-posts.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amu-blog-posts',\n  templateUrl: './blog-posts.component.html',\n  styleUrls: ['./blog-posts.component.scss']\n})\nexport class BlogPostsComponent implements OnInit {\n\n  posts$;\n\n  constructor(blogPostsService: BlogPostsService) {\n    this.posts$ = blogPostsService.getPosts();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class BlogPostsService {\n\n  public blogPosts;\n\n  constructor(private httpClient: HttpClient) { }\n\n  public getPosts (): Observable<any> {\n\n    if (this.blogPosts) {\n      return Observable.create((observer) => {\n        observer.next(this.blogPosts);\n      });\n    }\n\n    // tslint:disable-next-line\n    const BASE_URL = 'https://gist.githubusercontent.com/amindunited/f6a619416efb261361c8abaf1c1da6be/raw/';\n    const REVISION_SHA = '9d53efe362363befdfe997a4632d57cc635b5101';\n    const POSTS_URL = `${BASE_URL}${REVISION_SHA}/posts.json`;\n\n    const request = this.httpClient.get(POSTS_URL);\n\n    request.subscribe((payload) => {\n      this.blogPosts = payload;\n    });\n\n    return request;\n\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}