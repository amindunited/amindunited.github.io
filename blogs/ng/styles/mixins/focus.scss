@import '../variables/base';

$focus-offset-default: 3px !default;
$focus-border-radius: 3px;
$focus-offset: null !global;
$focus-radius: null !global;
$focus-position: null !global;
$focus-size: null !global;

// base style for pseudo element
@mixin focus-base($size, $inside) {
  $focus-offset: $size !global;
  $focus-radius: $focus-border-radius !global;

  @if $inside == false {
    $focus-position: (-1 * $focus-offset) - 1 !global;
    $focus-size: calc(100% + (2 * #{$focus-offset})) !global;
  } @else if $inside == true {
    $focus-position: $focus-offset !global;
    $focus-size: calc(100% - (2 * #{$focus-offset})) !global;
  }

  border-color: currentColor;
  border-radius: $focus-radius;
  border-style: dotted;
  border-width: 1px;
  content: '';
  display: block;
  height: $focus-size;
  left: $focus-position;
  pointer-events: none;
  position: absolute;
  top: $focus-position;
  width: $focus-size;

  @content;

  $focus-offset:   null !global;
  $focus-radius:   null !global;
  $focus-position: null !global;
  $focus-size:     null !global;
}

// set style when an element is focused
@mixin focus($size: $focus-offset-default, $inside: false) {
  position: relative;

  &:focus {
    outline: none;

    &::after {
      @include focus-base($size, $inside) {
        @content;
      }
    }
  }
}

// override the colour of the ::after element
@mixin focus-base-colour($main) {
  border-color: $main;
}

// override the colour of the ::after element
// when an element is focused
@mixin focus-colour($main) {
  &:focus::after {
    border-color: $main;
  }
}

// used for inline elements
@mixin focus-inline($size: $focus-offset-default) {
  &:focus {
    outline: 1px dotted currentColor;
    outline-offset: $size;
  }
}
